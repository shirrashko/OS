shirashko, login2
209144013
EX: 1

FILES:
`memory_latency.cpp` -- Main program source file that measures memory read latency.

REMARKS:
These are some remarks that
I want the graders to know
about this submission.

ANSWERS:

Q1:
Here are answers to theoreical questions
if there were such questions in the exercise.

Q2:
Here are answers to theoreical questions
if there were such questions in the exercise.

ANSWERS:

# Assignment 1: Understanding `WhatIDo` - System Call Tracing with `strace`
`WhatIDo` is a simple executable program that requires exactly one command-line argument to function correctly. Based on the system trace:
- The program checks for necessary libraries and configurations at startup.
- It requires the C standard library (`libc.so.6`) which is dynamically linked.
- On failing to receive exactly one argument, `WhatIDo` outputs an error message to `stderr` indicating that a single argument is expected.
- After displaying the error, the program exits with a status code of `0`, indicating a normal termination without executing its main functionality due to the incorrect number of input arguments.
- The error output is done by duplicating the file descriptor for `stderr` and writing the error message to it. At the end of the program, the file descriptor is closed to release resources.

This assignment highlights the use of `strace` to understand not only the program's dependency on system libraries and memory management but also its basic runtime behavior in handling user inputs and errors.




Finally, the README file should contain an explanation of the results you obtained. What can we see in the
graph? Did you get the results you expected? Why? In your answer explain the difference between latency for random
and sequential array access patterns. Also address the difference between the latency for the different cache levels.

# Assignment 2
Explanation of the results


Q1: Measurement Variability
**Question:** How consistent are the measurements across multiple runs?
**Answer:** The measurements tend to be consistent when the system is idle. Small discrepancies observed can be
attributed to minor background processes. Measurements become inconsistent with significant CPU load from other
applications.

### Q2: Effect of Repetition on Measurements
**Question:** Does increasing the number of repetitions affect the average time of accessing the array?

**Answer:** Beyond a certain threshold, increasing the number of repetitions does not significantly affect the average
time, indicating that the measurement has reached a level of stability. The results plateau, suggesting that initial
cache effects are averaged out.

## Graphs and Screenshots
- `results_graph.png` - Graph depicting the memory access times as array size increases.
- `lscpu_output.png` - Screenshot showing the output of the `lscpu` command for system specification.
- `page_size_output.png` - Screenshot showing the output of the `getconf PAGE_SIZE` command, provided for the bonus part.

How to Build and Run
1. Ensure all source files and the Makefile are in the same directory.
2. In a terminal, navigate to the directory and run the command `make`.
3. Execute the program using `./memory_latency max_size factor repeat`.
   - Example: `./memory_latency 800 1.5 200`
4. To clean up object files and executable, run `make clean`.